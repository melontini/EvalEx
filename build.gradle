/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    alias libs.plugins.lombok
    alias libs.plugins.spotless
}

def local = !System.getenv().containsKey("GITHUB_RUN_NUMBER")

group = 'me.melontini'
version = "${project.version}-${local ? 'local' : "build.${System.getenv("GITHUB_RUN_NUMBER")}"}"
description = 'EvalEx'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly libs.jetbrains.annotations
    annotationProcessor libs.jabel
    compileOnly libs.jabel

    testImplementation platform(libs.junit.bom)
    testImplementation libs.junit.jupiter
    testImplementation libs.assertj.core
    testImplementation libs.mockito.core
}

configure([tasks.compileJava]) {
    sourceCompatibility = 16
    options.release = 11

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileTestJava {
    sourceCompatibility = targetCompatibility = 11
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat("1.17.0").style("GOOGLE").reflowLongStrings()
        licenseHeaderFile("spotless/header.txt")
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId "evalex"
            from(components.java)
        }
    }

    if (!local) {
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/melontini/EvalEx"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
